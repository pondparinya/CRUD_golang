// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/pondparinya/CRUD_golang/database/entity"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// DeleteByStudentID mocks base method.
func (m *MockIRepository) DeleteByStudentID(ctx context.Context, StudentID string) *mongo.SingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByStudentID", ctx, StudentID)
	ret0, _ := ret[0].(*mongo.SingleResult)
	return ret0
}

// DeleteByStudentID indicates an expected call of DeleteByStudentID.
func (mr *MockIRepositoryMockRecorder) DeleteByStudentID(ctx, StudentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByStudentID", reflect.TypeOf((*MockIRepository)(nil).DeleteByStudentID), ctx, StudentID)
}

// FindAllStudent mocks base method.
func (m *MockIRepository) FindAllStudent(ctx context.Context) (*[]entity.StudentEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStudent", ctx)
	ret0, _ := ret[0].(*[]entity.StudentEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStudent indicates an expected call of FindAllStudent.
func (mr *MockIRepositoryMockRecorder) FindAllStudent(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStudent", reflect.TypeOf((*MockIRepository)(nil).FindAllStudent), ctx)
}

// FindByID mocks base method.
func (m *MockIRepository) FindByID(ctx context.Context, ID primitive.ObjectID) (*entity.StudentEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ID)
	ret0, _ := ret[0].(*entity.StudentEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIRepositoryMockRecorder) FindByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIRepository)(nil).FindByID), ctx, ID)
}

// FindByStudentID mocks base method.
func (m *MockIRepository) FindByStudentID(ctx context.Context, studentID string) (*entity.StudentEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStudentID", ctx, studentID)
	ret0, _ := ret[0].(*entity.StudentEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStudentID indicates an expected call of FindByStudentID.
func (mr *MockIRepositoryMockRecorder) FindByStudentID(ctx, studentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStudentID", reflect.TypeOf((*MockIRepository)(nil).FindByStudentID), ctx, studentID)
}

// InsertStudent mocks base method.
func (m *MockIRepository) InsertStudent(ctx context.Context, ent *entity.StudentEntity) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStudent", ctx, ent)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertStudent indicates an expected call of InsertStudent.
func (mr *MockIRepositoryMockRecorder) InsertStudent(ctx, ent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStudent", reflect.TypeOf((*MockIRepository)(nil).InsertStudent), ctx, ent)
}

// UpdateStudent mocks base method.
func (m *MockIRepository) UpdateStudent(ctx context.Context, ent *entity.StudentEntity) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent", ctx, ent)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockIRepositoryMockRecorder) UpdateStudent(ctx, ent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockIRepository)(nil).UpdateStudent), ctx, ent)
}
